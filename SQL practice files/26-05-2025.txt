SHOW DATABASES;
CREATE DATABASE vit;
USE vit;

CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    department VARCHAR(50)
);

CREATE TABLE courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100),
    credits INT
);

CREATE TABLE semesters (
    semester_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    semester_name VARCHAR(20),
    year INT,
    FOREIGN KEY (student_id) REFERENCES students(student_id)
);

CREATE TABLE examinations (
    exam_id INT AUTO_INCREMENT PRIMARY KEY,
    semester_id INT,
    course_id INT,
    exam_type VARCHAR(50),
    score DECIMAL(5,2),
    FOREIGN KEY (semester_id) REFERENCES semesters(semester_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);

INSERT INTO students (name, email, department) VALUES
('B', 'ananya@vit.ac.in', 'btech'),
('A', 'rahul@vit.ac.in', 'mtech');

INSERT INTO courses (course_name, credits) VALUES
('DSA', 4),
('AI', 3);

INSERT INTO semesters (student_id, semester_name, year) VALUES
(1, 'Spring', 2025),
(2, 'Spring', 2025);

INSERT INTO examinations (semester_id, course_id, exam_type, score) VALUES
(1, 1, 'Midterm', 88.5),
(1, 1, 'Final', 92.0),
(2, 2, 'Midterm', 80.0),
(2, 2, 'Final', 85.0);

package connection;

import java.sql.*;

public class DBConnection {
    public static void main(String[] args){
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/vit", "root", "sanjananalam");
            System.out.println(con);

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM courses");

            while (rs.next()) {
                System.out.println(rs.getInt(1) + " " + rs.getString(2) + " " + rs.getInt(3));
            }

            con.close();
        } catch (Exception e) {
            System.out.println("Sorry for inconvience's pls check the credenticals");
            e.printStackTrace();
        }
    }
}

package crud_operations;

import java.sql.Connection;
import java.sql.DriverManager;

public class DB_Connection {
    public Connection get_connection() {
        Connection connection = null;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/vit", "root", "sanjananalam");
        } catch (Exception e) {
            System.out.println("Connection failed: " + e.getMessage());
        }
        return connection;
    }
}

package crud_operations;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;

public class crud_operation {

    public static void main(String[] args) {
        crud_operation obj = new crud_operation();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter student ID for semester: ");
        int studentId = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Enter semester name (e.g., Spring): ");
        String semName = scanner.nextLine();

        System.out.print("Enter year: ");
        int year = scanner.nextInt();

        obj.insertSemester(studentId, semName, year);

        System.out.print("Enter semester ID to insert exam: ");
        int semesterId = scanner.nextInt();

        System.out.print("Enter course ID: ");
        int courseId = scanner.nextInt();
        scanner.nextLine();

        System.out.print("Enter exam type (Midterm/Final): ");
        String examType = scanner.nextLine();

        System.out.print("Enter score: ");
        double score = scanner.nextDouble();

        obj.insertExam(semesterId, courseId, examType, score);

        System.out.print("Enter student ID to view exams: ");
        int viewId = scanner.nextInt();
        obj.getExamsByStudent(viewId);

        scanner.close();
    }

    public void insertSemester(int studentId, String semesterName, int year) {
        DB_Connection db = new DB_Connection();
        Connection con = db.get_connection();
        try {
            String query = "INSERT INTO semesters (student_id, semester_name, year) VALUES (?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, studentId);
            ps.setString(2, semesterName);
            ps.setInt(3, year);
            ps.executeUpdate();
            System.out.println("Semester inserted successfully.");
        } catch (Exception e) {
            System.out.println("Error inserting semester: " + e.getMessage());
        }
    }

    public void insertExam(int semesterId, int courseId, String examType, double score) {
        DB_Connection db = new DB_Connection();
        Connection con = db.get_connection();
        try {
            String query = "INSERT INTO examinations (semester_id, course_id, exam_type, score) VALUES (?, ?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, semesterId);
            ps.setInt(2, courseId);
            ps.setString(3, examType);
            ps.setDouble(4, score);
            ps.executeUpdate();
            System.out.println("Exam inserted successfully.");
        } catch (Exception e) {
            System.out.println("Error inserting exam: " + e.getMessage());
        }
    }

    public void getExamsByStudent(int studentId) {
        DB_Connection db = new DB_Connection();
        Connection con = db.get_connection();
        try {
            String query = "SELECT e.exam_id, c.course_name, e.exam_type, e.score " +
                           "FROM examinations e " +
                           "JOIN courses c ON e.course_id = c.course_id " +
                           "JOIN semesters s ON e.semester_id = s.semester_id " +
                           "WHERE s.student_id = ?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, studentId);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                System.out.println("Exam ID: " + rs.getInt("exam_id"));
                System.out.println("Course: " + rs.getString("course_name"));
                System.out.println("Type: " + rs.getString("exam_type"));
                System.out.println("Score: " + rs.getDouble("score"));
                System.out.println("-------------------------");
            }
        } catch (Exception e) {
            System.out.println("Error fetching exams: " + e.getMessage());
        }
    }
}

