use san
switched to db san
db.products.insertMany([
    { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate": ISODate("2011-05-14"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 },"color":["white","black"],"storage":[64,128,256]},
    { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate": ISODate("2011-09-01") , "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 },"color":["white","black","purple"],"storage":[128,256,512]},
    { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate": ISODate("2015-01-14"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 },"color":["blue"],"storage":[16,64,128]},
    { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate": ISODate("2020-05-14"),"spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256,1024]},
    { "_id" : 5, "name" : "SmartPhone", "price" : 599,"releaseDate": ISODate("2022-09-14"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256]}
 ])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5
  }
}
db.products.deleteOne({})
{
  acknowledged: true,
  deletedCount: 1
}
show databases
admin    40.00 KiB
config   72.00 KiB
local    72.00 KiB
san      72.00 KiB
test     24.00 KiB
vit     168.00 KiB
db.products.find({})
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
db.products.deleteOne({'spec.ram':})
SyntaxError: Unexpected token (1:34)

[0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39mproducts[33m.[39mdeleteOne({[32m'spec.ram'[39m[33m:[39m})
 [90m   |[39m                                   [31m[1m^[22m[39m[0m
db.products.deleteOne({'spec.ram':{$gt:8}})
{
  acknowledged: true,
  deletedCount: 1
}
db.products.find({})
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
db.products.deleteOne({price:{$lt:699}})
{
  acknowledged: true,
  deletedCount: 1
}
db.products.deleteMany({price : {$gt :600}})
{
  acknowledged: true,
  deletedCount: 2
}
db.products.deleteMany({
  $or: [
    { "color": "black" },
    { "storage": { $gte: 256 } }
  ]
})
{
  acknowledged: true,
  deletedCount: 0
}
db.products.deleteMany({
  price: { $gt: 800 },
  color: { $nin: ["black"] },
  storage: { $elemMatch: { $lte: 128 } }})
{
  acknowledged: true,
  deletedCount: 0
}
db.products.deleteMany({ "color.2": { $exists: false } })
{
  acknowledged: true,
  deletedCount: 0
}
db.products.deleteMany({color:["white","black"]})
{
  acknowledged: true,
  deletedCount: 0
}
use sanj
switched to db sanj
db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }
}
db.sales.aggregate([
  {
    $match: { item: "Americanos" }
  },
  {
    $group: {
      _id: "$size",
      totalQty: { $sum: "$quantity" }
    }
  },
  {
    $sort: { totalQty: -1 }
  }
]);
{
  _id: 'Grande',
  totalQty: 33
}
{
  _id: 'Short',
  totalQty: 22
}
{
  _id: 'Tall',
  totalQty: 15
}
use sanja
switched to db sanja
db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }
}
db.sales.aggregate([
  {
$group:{
_id:'$item',
averageQty:{$avg:'$quantity'},
},
},
]);
{
  _id: 'Cappuccino',
  averageQty: 16.333333333333332
}
{
  _id: 'Mochas',
  averageQty: 11
}
{
  _id: 'Lattes',
  averageQty: 27.5
}
{
  _id: 'Americanos',
  averageQty: 17.5
}
db.sales.aggregate([
  {
$match:{
price:{$gt:7}
}
},
  {
$group:{
_id:'$item',
averageQty:{$avg:'$quantity'}}}])
{
  _id: 'Cappuccino',
  averageQty: 17
}
{
  _id: 'Americanos',
  averageQty: 16
}
{
  _id: 'Mochas',
  averageQty: 11
}
{
  _id: 'Lattes',
  averageQty: 27.5
}
db.sales.aggregate([
  {
$addFeilds:{
total:{$mul:["$price","$quantity"]}}},
  {
$group:{
_id:"item",
avgTotal:{$avg:"$total"}}}
])
MongoServerError[Location40324]: Unrecognized pipeline stage name: '$addFeilds'
db.sales.aggregate([
  {
$addFields:{
total:{$mul:["$price","$quantity"]}}},
  {
$group:{
_id:"item",
avgTotal:{$avg:"$total"}}}
])
MongoServerError[InvalidPipelineOperator]: Invalid $addFields :: caused by :: Unrecognized expression '$mul'
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      avgRevenue: { $avg: { $multiply: ["$price", "$quantity"] } }
    }
  }
])
{
  _id: 'Lattes',
  avgRevenue: 562.5
}
{
  _id: 'Americanos',
  avgRevenue: 140
}
{
  _id: 'Mochas',
  avgRevenue: 275
}
{
  _id: 'Cappuccino',
  avgRevenue: 127.33333333333333
}
db.sales.aggregate([
  {
$group:{
_id:"$item",
avgRevenue:{$avg:{$multiply:["$price","$quantity"]}}},
    {
$match:{avgRevenue:140}},
  {$sort:{
avgRevenue=-1}}
])
SyntaxError: Unexpected token (6:4)

[0m [90m 4 |[39m _id[33m:[39m[32m"$item"[39m[33m,[39m
 [90m 5 |[39m avgRevenue[33m:[39m{$avg[33m:[39m{$multiply[33m:[39m[[32m"$price"[39m[33m,[39m[32m"$quantity"[39m]}}}[33m,[39m
[31m[1m>[22m[39m[90m 6 |[39m     {
 [90m   |[39m     [31m[1m^[22m[39m
 [90m 7 |[39m $match[33m:[39m{avgRevenue[33m:[39m[35m140[39m}}[33m,[39m
 [90m 8 |[39m   {$sort[33m:[39m{
 [90m 9 |[39m avgRevenue[33m=[39m[33m-[39m[35m1[39m}}[0m
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      avgRevenue: { $avg: { $multiply: ["$price", "$quantity"] } }
    }
  },
  {
    $match: {
      avgRevenue: 140
    }
  },
  {
    $sort: {
      avgRevenue: -1
    }
  }
])
{
  _id: 'Americanos',
  avgRevenue: 140
}
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      avgRevenue: { $avg: { $multiply: ["$price", "$quantity"] } }
    }
  },
  {
    $match: {
      avgRevenue:{$gte: 140}
    }
  },
  {
    $sort: {
      avgRevenue: -1
    }
  }
])
{
  _id: 'Lattes',
  avgRevenue: 562.5
}
{
  _id: 'Mochas',
  avgRevenue: 275
}
{
  _id: 'Americanos',
  avgRevenue: 140
}
db.sales.drop
[Function: drop] AsyncFunction {
  apiVersions: [ 1, Infinity ],
  returnsPromise: true,
  serverVersions: [ '0.0.0', '999.999.999' ],
  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],
  returnType: { type: 'unknown', attributes: {} },
  deprecated: false,
  platforms: [ 'Compass', 'Browser', 'CLI' ],
  isDirectShellCommand: false,
  acceptsRawInput: false,
  shellCommandCompleter: undefined,
  help: [Function (anonymous)] Help
}
db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
MongoBulkWriteError: E11000 duplicate key error collection: sanja.sales index: _id_ dup key: { _id: 1 }
db.sales.drop()
true
db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }
}
db.sales.aggregate([
  {
$group:{
_id:"$item",
itemCount:{$count:{}},},},])
{
  _id: 'Americanos',
  itemCount: 4
}
{
  _id: 'Mochas',
  itemCount: 1
}
{
  _id: 'Lattes',
  itemCount: 2
}
{
  _id: 'Cappuccino',
  itemCount: 3
}
db.sales.aggregate([
  {
$group:{
_id:"$item",
itemCount:{$count:{}},},},
  {
$match:{itemCount:{$gt:2}}},])
{
  _id: 'Americanos',
  itemCount: 4
}
{
  _id: 'Cappuccino',
  itemCount: 3
}
db.sales.aggregate([
  {
$group:{
_id:"$item",
itemCount:{$count:{}},},},
  {
$match:{itemCount:{$gte:2}}},])
{
  _id: 'Lattes',
  itemCount: 2
}
{
  _id: 'Americanos',
  itemCount: 4
}
{
  _id: 'Cappuccino',
  itemCount: 3
}
db.sales.aggregate([
  {
$group:{
_id:"item",
totalSum:{$sum:{"$quantity"}}}}])
SyntaxError: Unexpected token (5:27)

[0m [90m 3 |[39m $group[33m:[39m{
 [90m 4 |[39m _id[33m:[39m[32m"item"[39m[33m,[39m
[31m[1m>[22m[39m[90m 5 |[39m totalSum[33m:[39m{$sum[33m:[39m{[32m"$quantity"[39m}}}}])
 [90m   |[39m                            [31m[1m^[22m[39m[0m
db.sales.aggregate([
  {
$group:{
_id:"$item",
totalSum:{$sum:{"$quantity"}}}}])
SyntaxError: Unexpected token (5:27)

[0m [90m 3 |[39m $group[33m:[39m{
 [90m 4 |[39m _id[33m:[39m[32m"$item"[39m[33m,[39m
[31m[1m>[22m[39m[90m 5 |[39m totalSum[33m:[39m{$sum[33m:[39m{[32m"$quantity"[39m}}}}])
 [90m   |[39m                            [31m[1m^[22m[39m[0m
db.sales.aggregate([
  {
    $group: {
      _id: "$item", // ✅ add $ to refer to the field "item"
      totalSum: { $sum: "$quantity" } // ✅ sum up quantity values
    }
  }
])
{
  _id: 'Americanos',
  totalSum: 70
}
{
  _id: 'Mochas',
  totalSum: 11
}
{
  _id: 'Lattes',
  totalSum: 55
}
{
  _id: 'Cappuccino',
  totalSum: 49
}
db.sales.aggregate([
  {
$group:{
_id:"$item",
totalSum:{$sum:{"$quantity"}}}}])
SyntaxError: Unexpected token (5:27)

[0m [90m 3 |[39m $group[33m:[39m{
 [90m 4 |[39m _id[33m:[39m[32m"$item"[39m[33m,[39m
[31m[1m>[22m[39m[90m 5 |[39m totalSum[33m:[39m{$sum[33m:[39m{[32m"$quantity"[39m}}}}])
 [90m   |[39m                            [31m[1m^[22m[39m[0m
db.sales.aggregate([
  {
$group:{
_id:"$item",
totalSum:{$sum:"$quantity"}}}])
{
  _id: 'Lattes',
  totalSum: 55
}
{
  _id: 'Americanos',
  totalSum: 70
}
{
  _id: 'Mochas',
  totalSum: 11
}
{
  _id: 'Cappuccino',
  totalSum: 49
}
db.sales.aggregate([{$group:{_id:"$item",sumItems:{$sum:"$quantity"}}}])
{
  _id: 'Cappuccino',
  sumItems: 49
}
{
  _id: 'Americanos',
  sumItems: 70
}
{
  _id: 'Mochas',
  sumItems: 11
}
{
  _id: 'Lattes',
  sumItems: 55
}
db.sales.aggregate([
{
$group:{
_id:"$item",
sumItems:{$sum:"$quantity"}
}
},
  {$match:{
$sumItems:{$gt:100}}}])
MongoServerError[BadValue]: unknown top level operator: $sumItems. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.
db.sales.aggregate([
{
$group:{
_id:"$item",
sumItems:{$sum:"$quantity"}
}
},
  {$match:{
sumItems:{$gt:100}}}])
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      sumItems: { $sum: "$quantity" }
    }
  },
  {
    $match: {
      sumItems: { $gte: 100 }
    }
  }
])
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      sumprice: { $sum: "$price" }
    }
  },
  {
    $match: {
      sumprice: { $gt: 100 }
    }
  },
  {
    $sort: {
      sumprice: -1
    }
  },
  {
    $limit: 2
  }
]);
db.sales.aggregate([
  {
$group: {
      _id: "$item",
      sumRevenue: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
},{
sort:{sumRevenue:-1}}])
MongoServerError[Location40324]: Unrecognized pipeline stage name: 'sort'
db.sales.aggregate([
  {
$group: {
      _id: "$item",
      sumRevenue: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
},{
$sort:{sumRevenue:-1}}])
{
  _id: 'Lattes',
  sumRevenue: 1125
}
{
  _id: 'Americanos',
  sumRevenue: 560
}
{
  _id: 'Cappuccino',
  sumRevenue: 382
}
{
  _id: 'Mochas',
  sumRevenue: 275
}
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      totalRevenue: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  },
  {
    $match: {
      totalRevenue: { $gt: 100 }
    }
  },
  {
    $sort: { totalRevenue: -1 }
  }
])
{
  _id: 'Lattes',
  totalRevenue: 1125
}
{
  _id: 'Americanos',
  totalRevenue: 560
}
{
  _id: 'Cappuccino',
  totalRevenue: 382
}
{
  _id: 'Mochas',
  totalRevenue: 275
}
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      totalPrice: { $sum: "$price" },
      transactionCount: { $sum: 1 } 
    }
  },
  { 
    $match: { 
      totalPrice: { $gt: 100 } 
    } 
  },
  { 
    $sort: { 
      totalPrice: 1 
    } 
  },
  { 
    $limit: 2 
  }
])
db.sales.drop()
true
db.sales.insertMany([
	{ "_id" : 1, "item" : "Americanos", "price" : 5, "size": "Short", "quantity" : 22, "date" : ISODate("2022-01-15T08:00:00Z") },
	{ "_id" : 2, "item" : "Cappuccino", "price" : 6, "size": "Short","quantity" : 12, "date" : ISODate("2022-01-16T09:00:00Z") },
	{ "_id" : 3, "item" : "Lattes", "price" : 15, "size": "Grande","quantity" : 25, "date" : ISODate("2022-01-16T09:05:00Z") },
	{ "_id" : 4, "item" : "Mochas", "price" : 25,"size": "Tall", "quantity" : 11, "date" : ISODate("2022-02-17T08:00:00Z") },
	{ "_id" : 5, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 12, "date" : ISODate("2022-02-18T21:06:00Z") },
	{ "_id" : 6, "item" : "Cappuccino", "price" : 7, "size": "Tall","quantity" : 20, "date" : ISODate("2022-02-20T10:07:00Z") },
	{ "_id" : 7, "item" : "Lattes", "price" : 25,"size": "Tall", "quantity" : 30, "date" : ISODate("2022-02-21T10:08:00Z") },
	{ "_id" : 8, "item" : "Americanos", "price" : 10, "size": "Grande","quantity" : 21, "date" : ISODate("2022-02-22T14:09:00Z") },
	{ "_id" : 9, "item" : "Cappuccino", "price" : 10, "size": "Grande","quantity" : 17, "date" : ISODate("2022-02-23T14:09:00Z") },
	{ "_id" : 10, "item" : "Americanos", "price" : 8, "size": "Tall","quantity" : 15, "date" : ISODate("2022-02-25T14:09:00Z")}
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }
}
db.sales.aggregate([
  {
$group:{
_id:null,
maxQty:{$max:"$quantity"},},},{}])
MongoServerError[Location40323]: A pipeline stage specification object must contain exactly one field.
db.sales.aggregate([
  {
$group:{
_id:null,
maxQty:{$max:"$quantity"},},},
{
$project:{
_id:0,},},])
{
  maxQty: 30
}
db.sales.aggregate([
  {
$group:{
_id:"$item",
maxQty:{$min:{$multiply:["$quantity","$price"]}}}}])
{
  _id: 'Cappuccino',
  maxQty: 72
}
{
  _id: 'Americanos',
  maxQty: 110
}
{
  _id: 'Mochas',
  maxQty: 275
}
{
  _id: 'Lattes',
  maxQty: 375
}
db.sales.aggregate([
  {
$group:{
_id:"$item",
minQty:{$min:{$multiply:["$quantity","$price"]}}}}])