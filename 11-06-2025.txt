db.products.find(
  { price: { $gte: 700, $lte: 900 } },
  { _id: 0, name: 1 }
)

import com.mongodb.client.*;
import org.bson.Document;
import com.mongodb.client.model.Projections;

public class PriceRangeQuery {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("vit");
        MongoCollection<Document> collection = database.getCollection("products");

        // Query: price between 700 and 900
        Document priceRangeQuery = new Document("price", new Document("$gte", 700).append("$lte", 900));

        // Projection: include 'name', exclude '_id'
        FindIterable<Document> products = collection.find(priceRangeQuery)
            .projection(Projections.fields(Projections.include("name"), Projections.excludeId()));

        // Print results
        for (Document doc : products) {
            System.out.println(doc.toJson());
        }

        mongoClient.close();
    }
}

db.products.aggregate([
  {
    $group: {
      _id: null,
      averagePrice: { $avg: "$price" }
    }
  }
])

import com.mongodb.client.*;
import org.bson.Document;
import static com.mongodb.client.model.Aggregates.*;
import static com.mongodb.client.model.Accumulators.*;

import java.util.Arrays;

public class AverageProductPrice {
    public static void main(String[] args) {
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("yourDatabaseName");
        MongoCollection<Document> products = database.getCollection("products");

        AggregateIterable<Document> result = products.aggregate(Arrays.asList(
            group(null, avg("averagePrice", "$price"))
        ));

        for (Document doc : result) {
    System.out.println("Average Price: " + doc.getDouble("avgPrice"));


        mongoClient.close();
    }
}


db.sales.aggregate([
  { 
    $sort: { item: 1, price: -1 }
  },
  { 
    $group: {
      _id: "$item",
      highestPriceId: { $first: "$_id" },
      highestPrice: { $first: "$price" }
    }
  }
])

db.sales.aggregate([
  {
    $group: {
      _id: { item: "$item", size: "$size" },
      maxPrice: { $max: "$price" }
    }
  },
  {
    $sort: { "_id.item": 1, "maxPrice": -1 }
  },
  {
    $group: {
      _id: "$_id.item",
      sizeWithMaxPrice: { $first: "$_id.size" },
      maxPrice: { $first: "$maxPrice" }
    }
  }
])

package connection;

import org.bson.Document;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Aggregates.*;
import static com.mongodb.client.model.Accumulators.*;
import static com.mongodb.client.model.Sorts.*;
import java.util.Arrays;

public class MongoDB {
    public static void main(String[] args) {
        try (MongoClient mongo = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = mongo.getDatabase("vit");
            MongoCollection<Document> sales = db.getCollection("sales");
            
            sales.aggregate(Arrays.asList(
                group("$item", 
                    max("maxPrice", "$price"),
                    addToSet("sizes", "$size")
                ),
                sort(descending("maxPrice"))
            )).forEach((Document doc) -> {
                System.out.printf("%-10s: $%2d (Sizes: %s)%n",
                    doc.getString("_id"),
                    doc.getInteger("maxPrice"),
                    doc.getList("sizes", String.class));
            });
        }
    }
}
